[DEFAULT]
# Path to your data generated using PrepareDataToHDF5.py
# Should include all HDF5 and csv files
data path = /Path to folder with train-test splits/
# Where to output the results from the networks
output path = /Path to results/results.csv
# Path to your solver file (One is included in the repo)
solver path = /Path to folder containing/solver.prototxt
# Path where caffe will store snapshots and prototxts
temp path = /Path to folder/Working
name = TestNet #Name the network
learning rate = 0.01 # set learning rate
weight decay = 0.0005 # set weight decay
# The epoch settings controls the number of times the network will see each data point in the training set
# 300 epochs means the network will be trained on each data point 300 times
epochs = 300
# Evaluate the network every 50 epochs
test interval = 50
# Number of different labels.  Since the example is binary, there are two classes
number of classes = 2
# Number of samples to pass through the network at once
batch size = 256
# Average the results across over 5 folds
folds = 5

# Network #1
[Net1]
# 1 = ReLU, 2 = sigmoid, 3 = TanH
activation function = 1
# Number of neurons in each layer, separated by commas
network = 50,50
# Percentage of nuerons to dropout during training phase (input layer)
input dropout = 0.2
# Percentage of nuerons to dropout during training phase (hidden layers)
hidden dropout = 0.5
# 1 = Xavier, 2 = Gaussian
filler = 2
l2 regularization = False

# Network #2
[Net2]
# 1 = ReLU, 2 = sigmoid, 3 = TanH
activation function = 1
network = 50,50,50
input dropout = 0.2
hidden dropout = 0.5
# 1 = Xavier, 2 = Gaussian
filler = 2
l2 regularization = False
